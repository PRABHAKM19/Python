class Node:
    def __init__(self, key):
        self.key = key
        self.deleted=False
        self.left = None
        self.right = None

def insert(root, key):
    if root is None:
        return Node(key)
    elif key < root.key:
        root.left = insert(root.left, key)
    else:
        root.right = insert(root.right, key)
    return root

def search(root, key):
    if root is None or root.deleted and root.key == key:
        return None
    elif root.key == key:
        return root
    elif key < root.key:
        return search(root.left, key)
    else:
        return search(root.right, key)

def mark_deleted(node):
    if node is not None:
        node.deleted = True

def delete(root, key):
    if root.left is None:                        #node with one child
        temp=root.right
        root=None
        return temp
    if root.right is None:
        temp=root.left
        root=None
        return temp
    
    if root is None:                            #node with two children
        return root
    elif key < root.key:
        root.left = delete(root.left, key)
    elif key > root.key:
        root.right = delete(root.right, key)
        return root        
    if not root.deleted:
        return root
    else:
        return None


def inorder_traversal(root):
    if root:
        inorder_traversal(root.left)
        if not root.deleted:
            print(root.key, end=" ")
        inorder_traversal(root.right)

root = None
root = insert(root, 5)
# n=int(input("Times: "))
# while True:
#     if n > 0:
#         root = insert(root, n)
#     else:
#         break
# print("Inorder traversal:")

insert(root, 3)
insert(root, 2)
insert(root, 4)
insert(root, 7)
insert(root, 6)
insert(root, 8)

print("\nOriginal tree:")
inorder_traversal(root)

key = 2
node_to_delete = search(root, key)
if node_to_delete:
    mark_deleted(node_to_delete)
    root = delete(root, key)

print("\nAfter deleting", key,":")
inorder_traversal(root)

key = 3
node_to_delete = search(root, key)
if node_to_delete:
    mark_deleted(node_to_delete)
    root = delete(root, key)

print("\nAfter deleting", key,":")
inorder_traversal(root)
